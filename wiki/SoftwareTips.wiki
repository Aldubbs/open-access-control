#summary Software usage

= Software Guide =
Once you have downloaded the software, you'll need to set up a few parameters to get started.
----
==Requirements==
In order to install the software on your Arduino, the following is required.

  * The latest [http://code.google.com/p/open-access-control/downloads/list Open Access Control software]. 

  * The latest [http://arduino.cc Arduino IDE] for your Windows, Linux, or MAC system.

  * Some basic hardware to test with. At a minimum, you'll want to get at least one PIN or RFID reader and gook up some LEDs to the output pins to check their status. See the [HardwareTips hardware setup guide] for more info on readers.

----
==Quick Start Guide==
To get started right away, perform the following tasks:
  * Download and unzip the program files. Place the main .PDE file into a directory of your choice.
  * Extract the library files into your Arduino libraries directory. See the [http://arduino.cc/en/Guide/HomePage getting started guide ] for more details.
  * Open the sketch and edit Open_Access_Control.pde. Change:
{{{
#define PRIVPASSWORD 0x1234
}}}
 to something less obvious.
  * Compile and upload the sketch.
  * Start up the Serial Monitor or another terminal. Attach to the Arduino and make sure the console comes up.
  * Scan a tag or enter a 7-digit PIN number at your reader and write down the result.
  * Edit your super static user list to put at least one of these tag values in permanently. You'll want this in case you lock yourself out later.
{{{
#define gonzo   0x1234                  
#define snake   0x1234                 
#define satan   0x1234
long  superUserList[] = { gonzo, snake, satan};  
}}}
  * Compile and upload the code again. You should now be able to swipe tags and have the corresponding door pins activate.

----
==Adding users==
Once you have this working, you can log into the console again and add users.

  * You must enter the console password to enable user editing and all other functions other than locking up and setting the alarm
  * You can exit privileged mode by typing 'e' again.
  * Several usermasks (security levels) are defined in the code. A default of 254 will work for getting started.
  * You can store up to 200 users in eeprom on the Arduino. Users are numbered 0..199.
  * It's recommended that you create a spreadsheet of your users, as the software will replace the tage info with asteriks unless debugging is enabled.
==Customization==
  * You can customize the reader logic, keypad commands, timeout values and alarm functions as needed. Samples are included in the code. Be sure to make frequent backups.
  * There are about 20 bytes of unused eeprom space, 16KB of flash and about 650-700 bytes of free memory when an Atmega 328-based Arduino is used. Room for additional features does exist.
  * Please consider contributing anything that you think is useful back to the project.
==Sample Usage Instructions==
You may want to post a set of directions near an inside keypad to remind users of system commands. Here is a sample:

  * 1# - Turns off front door chime.
  * 2# - Arms alarm and locks all doors.
  * 3# - Locks outside door, leaves inside unlocked.
  * 4# - Unlocks all doors and leaves unlocked.  Door chime on front door
  * 5# - Locks all doors.
  * 111111 - Locks all doors (no card or # needed)


----
Open Access Control by [http://shop.23b.org 23b Shop] is licensed under a [http://creativecommons.org/licenses/by/3.0/Creative Commons Attribution 3.0 Unported License].

Based on a work at [http://code.google.com code.google.com].